<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.sln</groupId>
	<artifactId>glassroom</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>glass-room</name>
	<description>Bin packing project</description>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>1.5.8.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>

	<properties>
		<java.version>1.8</java.version>
		<bootstrap.version>3.4.1</bootstrap.version>
		<font-awesome.version>4.7.0</font-awesome.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
	
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
	
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
			
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>

		<!-- hot swapping, disable cache for template, enable live reload -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<optional>true</optional>
		</dependency>

		<!-- Optional, for bootstrap -->
		<dependency>
			<groupId>org.webjars</groupId>
			<artifactId>bootstrap</artifactId>
			<version>${bootstrap.version}</version>
		</dependency>
		
		<!-- Optional, for font-awesome -->
		<dependency>
			<groupId>org.webjars</groupId>
			<artifactId>font-awesome</artifactId>
			<version>${font-awesome.version}</version>
		</dependency>
		
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
		</dependency>
		
		<!-- Installed in local repo -->
		<dependency>
			<groupId>org.packing</groupId>
			<artifactId>2d-bin-packing</artifactId>
			<version>1.0.0</version>
		</dependency>
		
		<!-- This dependency is needed for javadoc only. Otherwise javadoc generation fails -->
		<!--
		<dependency>
    		<groupId>javax.interceptor</groupId>
    		<artifactId>javax.interceptor-api</artifactId>
    		<version>1.2</version>
		</dependency>
		-->
		
	</dependencies>

	<build>
		<plugins>

			<!-- Include javadoc in final JAR -->
			<!-- 
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<executions>
					<execution>
						<id>attach-javadocs</id>
						<goals>
							<goal>jar</goal>
						</goals>
						<!- -
						<configuration>
							<additionalparam>-Xdoclint:none</additionalparam>
						</configuration>
						- ->
					</execution>
				</executions>
			</plugin>
			-->			
			
			<!-- Include spring-boot-maven-plugin if you want to make an executable jar[FAT JAR which 
                 includes all dependencies along with sprinboot loader] that you can run on 
                 commandline using java -jar NAME -->
            <!-- If you are not including it, result would be just a regular jar.
                 You could run the project using mvn spring-boot:run [on project root directory]-->
			<!--
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			-->
			
			<!--
				Using not-FAT jar and dependency/ folder instead of lib/ folder for dependencies
				because this way heroku-maven-plugin does not duplicate dependencies and makes the slug.tgz twice smaller
			-->
            <!-- The following 2 plugins will enable you to run small (not FAT JAR) JAR using java -jar NAME
				 You will just need your small JAR and dependency/ folder with all dependencies -->
            <!-- This will put all dependencies in the target/dependency folder -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy-dependencies</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}/dependency</outputDirectory>
                            <overWriteReleases>false</overWriteReleases>
                            <overWriteSnapshots>false</overWriteSnapshots>
                            <overWriteIfNewer>true</overWriteIfNewer>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- This will configure the Manifest.mf file -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>3.0.2</version>
                <configuration>
                    <archive>
                        <manifest>
                            <addClasspath>true</addClasspath>
                            <classpathPrefix>dependency/</classpathPrefix>
                            <mainClass>com.sln.glassroom.GlassRoomApplication</mainClass>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>			

			<!-- Heroku Maven plugin -->
			<plugin>
				<groupId>com.heroku.sdk</groupId>
				<artifactId>heroku-maven-plugin</artifactId>
				<version>1.2.1</version>
				<configuration>
					<appName>glass-room</appName>
					<!-- you can either create file Procfile in project root and place this 
						line into it: web: java $JAVA_OPTS ..... OR use the tag below. It seems that 
						this tag takes preference over Procfile if both are present -->
					<!-- With -Dspring.profiles.active=heroku Spring will use application-heroku.properties -->
					<processTypes>
						<web>java $JAVA_OPTS -Dserver.port=$PORT -Dspring.profiles.active=heroku -jar target/glassroom-0.0.1-SNAPSHOT.jar</web>
					</processTypes>
				</configuration>
			</plugin>
			
		</plugins>
	</build>


</project>
